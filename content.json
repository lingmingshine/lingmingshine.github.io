{"meta":{"title":"苓茗的杂货铺","subtitle":"Tsundoku,买来的书竟然都没有看过呀。","description":null,"author":"ZJ Liu","url":"http://liuzijian.top","root":"/"},"pages":[],"posts":[{"title":"算法之参考思路","slug":"project_20201010","date":"2020-10-09T16:00:00.000Z","updated":"2020-10-11T13:19:05.981Z","comments":true,"path":"2020/10/10/project_20201010/","link":"","permalink":"http://liuzijian.top/2020/10/10/project_20201010/","excerpt":"","text":"滚动数组： 用于动态规划的空间优化，主要思想： 只保存需要用到的子问题的答案（状态），覆盖那些不需要用到的子问题的答案，状态在同一块空间中不断翻滚迭代向前。 1.最长公共子串 dp/空间优化滚动数组 1234567891011121314151617181920public int longestSubsequence(String text1,String text2) &#123; int length1 = text1.length(); int length2 = text2.length(); //dp[i][j] int[][] dp = new int[length1 + 1][length2 + 1]; char[] textArr1 = text1.toCharArray(); char[] textArr2 = text2.toCharArray(); for(int i = 1;i &lt;= length1;++i) &#123; for(int j = 1;j &lt; length2;++j) &#123; if(textArr1[i-1] == textArr2[j - 1]) &#123; dp[i][j] = dp[i-1][j-1] + 1; &#125;else &#123; dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]); &#125; &#125; &#125; return dp[length1][length2]; &#125; 主要理解dp数组的含义：dp[i][j]表示对于字符串 &quot;&quot; 和 &quot;bab&quot;，其 公共子串 的长度为 0。因为有一个字符串是空串，它们的最长公共子序列的长度显然应该是 0。 2.最长不含重复字符的子字符串 dp/滑动窗口/双指针 1234567891011public int lengthOfLongestSubstring(String s) &#123; Map&lt;Character, Integer&gt; dic = new HashMap&lt;&gt;(); int res = 0, tmp = 0; for(int j = 0; j &lt; s.length(); j++) &#123; int i = dic.getOrDefault(s.charAt(j), -1); // 获取索引 i dic.put(s.charAt(j), j); // 更新哈希表 tmp = tmp &lt; j - i ? tmp + 1 : j - i; // dp[j - 1] -&gt; dp[j] res = Math.max(res, tmp); // max(dp[j - 1], dp[j]) &#125; return res; &#125; 3.矩阵路径 dfs深度搜索优先 1234567891011121314151617181920public boolean exist(char[][] board, String word) &#123; char[] words = word.toCharArray(); for(int i= 0;i &lt; board.length;i++)&#123; for(int j = 0;j &lt; board[0].length;j++)&#123; if(dfs(board,words,i,j,0)) return true; &#125; &#125; return false; &#125; boolean dfs(char[][] board,char[] word,int i,int j,int k)&#123; if(i &gt;= board.length || i &lt; 0 || j&gt;= board[0].length ||j&lt;0|| board[i][j] != word[k]) return false; if(k == word.length -1) return true; char tmp = board[i][j]; board[i][j] = '/'; boolean res = dfs(board,word,i+1,j,k+1) || dfs(board,word,i-1,j,k+1) || dfs(board,word,i,j+1,k+1) || dfs(board,word,i,j-1,k+1); board[i][j] = tmp; return res; &#125; 主要理解dfs的递归方式，注意base条件，递归顺序为：下上右左 4.数字序列中的某一位的数字 数学找规律 1234567891011121314public int findNthDigit(int n) &#123; int digit = 1; long start = 1; long count = 9; while(n &gt; count)&#123; n -= count; digit++; start *= 10; count = digit * start * 9; &#125; long num = start + (n-1)/digit; return Long.toString(num).charAt((n-1)%digit)-'0'; &#125; 12345678910/* 数字范围 数量 位数 占多少位 1-9 9 1 9 10-99 90 2 180 100-999 900 3 2700 1000-9999 9000 4 36000 ... 例如 2901 = 9 + 180 + 2700 + 12 即一定是4位数,第12位 n = 12; 数据为 = 1000 + (12 - 1)/ 4 = 1000 + 2 = 1002 定位1002中的位置 = (n - 1) % 4 = 3 s.charAt(3) = 2;*/ 评论区里面的大佬的思路，刚开始也是想到这个，但是觉得太繁琐，就没想深究下去。最后发现这种方法竟然还不错。 总结：有思路就应该尽快实现出来，要不然很多时候反而想得太深，最后到头来花更多时间都做不出来。","categories":[],"tags":[{"name":"算法之路","slug":"算法之路","permalink":"http://liuzijian.top/tags/算法之路/"}]},{"title":"三种设计模式的简单了解","slug":"project_20201009","date":"2020-10-08T16:00:00.000Z","updated":"2020-10-11T13:19:05.980Z","comments":true,"path":"2020/10/09/project_20201009/","link":"","permalink":"http://liuzijian.top/2020/10/09/project_20201009/","excerpt":"","text":"观察者模式：定义： 对象存在一对多关系，当一个对象被修改时，则会自动通知依赖它的对象。 观察者模式定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。观察者模式又叫做发布-订阅模式、模型-视图模式、源-监听器模式或从属者模式。观察者模式是一种对象行为型模式。 观察者模式的主要优点在于可以实现表示层和数据逻辑层的分离，并在观察目标和观察者之间建立一个抽象的耦合，支持广播通信；其主要缺点在于如果一个观察目标对象有很多直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间，而且如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 关键代码：在抽象类里有一个 ArrayList 存放观察者们。 使用场景： 一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。 一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。 一个对象必须通知其他对象，而并不知道这些对象是谁。 需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。 简单工厂模式：并不算一种设计模式，更多是一种编程习惯。定义的工厂类，根据传入参数的不同，被创建的实例具有相同的父类或者接口。总的来说就是屏蔽掉创建实例的细节，交由工厂类来创建。 factory method ：工厂方法 适用场景： 1.需要创建的对象较少 2.客户端不关心对象的创建过程 工厂方法模式：区别于简单工厂模式，主要是针对不同的对象提供不同的工厂。每个对象都有与之相对应的工厂。 适用场景： 1.客户端不需要知道它所创建的对象的类 2.客户端可以通过子类来指定创建对应的对象 抽象工厂模式：了解即可，不想深入。。。 抽象工厂模式是工厂方法的进一步深化，在这个模式中的工厂类不单单可以创建一个对象，而是可以创建一组对象。这是和工厂方法最大的不同点。 参考：https://juejin.im/entry/6844903474639929357 反射：invoke方法 https://www.cnblogs.com/onlywujun/p/3519037.html 设计模式博客： https://blog.csdn.net/LoveLion/article/details/17517213 备注：博客终究是经过一层消化过来的知识，所以深浅自知，可能对于入门是个不错的开始，但是深入知识点还是回归课本吧。","categories":[],"tags":[{"name":"Design Patterns","slug":"Design-Patterns","permalink":"http://liuzijian.top/tags/Design-Patterns/"}]},{"title":"读书笔记","slug":"算法4读书笔记","date":"2020-10-04T16:00:00.000Z","updated":"2020-10-05T13:51:34.650Z","comments":true,"path":"2020/10/05/算法4读书笔记/","link":"","permalink":"http://liuzijian.top/2020/10/05/算法4读书笔记/","excerpt":"","text":"算法4应该是很多前辈推荐的一本算法入门书了，因为这本书是以Java为基础语言的，所以本书会假定读者没有Java基础，会以一章节的内容来大概梳理一下这门优秀的面向对象语言知识。然后开始以入门排序算法的介绍一章节，来让我们先了解这些基础算法内容，但是我看的主要是堆排，快排，归并排这三种，其中的原地归并排序是先需要了解手摇算法这个为前提，要不然很容易整懵了，本书很多这些地方，说是入门书，其实很多的名词都要有一定的了解到。这是我目前学习的到的地方。 第一章，第二章20201005 算法4读书笔记​ ​ Java的基础部分，包括：原始数据类型，语句（声明语句，赋值语句，条件语句，循环语句），数组，静态方法，字符串等一系列快速浏览了一遍。 基础的二分查找，作为本书开头的第一个高效率和广泛应用的查找算法。 二分查找1234567891011121314public int rank(int key,int[] a,int left,int right) &#123; if(left &gt; right) &#123; return -1; &#125; int mid = left + (right - left) / 2; if(a[mid] &gt; key) &#123; return rank(key,a,left,mid - 1); &#125;else if(a[mid] &lt; key) &#123; return rank(key,a,mid + 1,right); &#125;else &#123; return mid; &#125; &#125; 思考问题：​ 二分法的变形 字符串，判断是否为回文串：123456789public boolean isPalindrome(String s) &#123; int N = s.length(); for(int i = 0;i &lt; N / 2;i++) &#123; if(s.charAt(i) != s.charAt(N-i-1)) &#123; return false; &#125; &#125; return true; &#125; 思考问题：​ 回文串的变形题 重写equals方法模板：12345678910public boolean equals(Object x) &#123; if(this == x) return true; if(x == null) return false; if(this.getClass() != x.getClass()) return false; Holiday that = (Holiday)x; if(this.day != that.day) return false; if(this.month != that.day) return false; if(this.year != that.year) return false; return true; &#125; 思考问题：​ 重写equal是在什么情况下，为什么要重写，重写的意义在哪。 归并排序","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://liuzijian.top/categories/读书笔记/"}],"tags":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://liuzijian.top/tags/读书笔记/"}]}]}